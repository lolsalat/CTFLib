package tmp;

import java.io.PrintStream;
import java.math.BigInteger;

import task.Name;
import task.Task;
import task.TaskExecutor;
import util.Utils;

public class Test {

	public static void main(String[] args) {
		TaskExecutor exec = new TaskExecutor();
		exec.setTimeout(2500);
		// DH
		exec.addVariable("encrypted", new BigInteger("9410050859967524542558366524072642723170135883653722943708972721157838964323549022451814786885420637567248064850924356489250353697507925072405571897285468927531295740367800688980104132812749540088700490654590765754908742364164645997129114401775680063828587650921732388950713014817427194272781929518317349629"));
		exec.addVariable("A", new BigInteger("23187236114044737980202301010377981957567834826097002259329732215832029164590548427993813872022269906985621659321099027486723905974929455935991355762087044060029595324765770506591481384894816231783432348105429644301363629158842814317415281139353649806479664213472400388579627465889915195938912323761394901854"));
		exec.addVariable("B", new BigInteger("430023359390034222082732011948356798311147247214997695270038813781532497547421283"));
		exec.addVariable("g", new BigInteger("3"));
		exec.addVariable("p", new BigInteger("90305169335730485950598415101217893402303737362315135278730261409445294704031509167637512660107955559185918986090983396652562770019199845552383394105389567680479440949527585226547133634308236806601707583400796205442270978108989952437585118186046289928998856968685505809825714658244999497754030142252225690743"));
		// BBC
		exec.addVariable("e", new BigInteger("3"));
		exec.addVariable("Mod", new BigInteger[] {
			new BigInteger("10045135711601576928937503996496706250303036316274532492154941582955621396466297845796862150234656609844633695356892550110010315273005333782673552066426198042419234338427488583441286027860325641411528145984255796783110070666279410928065556513629862873191057767684704000735442901594061667980265558398435551022124577063899570168051971680220756838490477696846236715555025537994154719675722968835355942130993940793131012915832089308299761332117783882459489590513306512106603466547155533978581797176131175920258989680814852010945909888042637245256700033458669039707145345022171262730179193676101610172240306379679958449753"),
			new BigInteger("25389979277074657019744587477005206541358919724558285053246425956619042365538938568797364659619285584594237413880169211405530744790682160180681107624464508145419973512642295186067044464618259274500488533838583462726380609812467353027583120246793790090437236600212439019099180094847351281840140920130510661345677575678953750854811975546908830284739397398248133598244082996939815278560357425446659165519399636003841500423250098605977940355430304375636552176876875719913012972534154380637735692702395818991319100360493198321025516695666823969924274700875310659082216070309003455599098808663960661779690587985533279042169"),
			new BigInteger("26093713360682203116942048211283914570374571497519934612178645018499758333665887232161799662303739348961143865406577764003230558271463847671143437757892541260291340629678662404345069444041113816198809356088819555276562708780357384966062143906053573190652562214948140553302847495772815067533937963247413615461964517658162932019091833473466115193690799320738867767297457674768744691528876470421082292753734465298294003754425374723663416017421247464827285831904330758561490439169221995563048904555585775032834554211569931094596027926540610162682141866505239228538374050354390398126261226965719850623124376374512846881327")
		});
		exec.addVariable("encrypted", new BigInteger[] {
				new BigInteger("3641611261321280711851442778027000140402607407175109120987322588186871484863948482721456841502491264173084019938823054332329806221557266137488898223665609224042880424571855733952566574279384315575266650272354645158308017848918077353726023449599417543629606285053813269569909309703183399530796286020869131276321553024944999241115247442727046490145082685008714002219903435324811480297477198601369844708873562527667659957546832080275188974155792744516205284973346885776747590133661669294145861401622659003697033685888785965731485831160170174416475847184378014702468729324410142590554686411458464415177893967135072091625"),
				new BigInteger("15604882889565932820382780063527959764082946287036996180565966578183343466655122880692745677448087253583003615795005083254334608654832698176947850203077736859300183823022489553411297580055388787949759979311484747528158353600280367052953453641006202377669175411433313569690946217103491279649941298251078746259109007432820266664298198662488943788844574591012170521389157912665648841822903054604075548884526557993422513483879409685527143756620663338804018293833176802464088569757240304977241946812843171372220777781107557013650819767077582526535931118735680575191690690428182463991256997577111184484101921682914156029475"),
				new BigInteger("22615448507060228566268366779597158932149995616807942760106579843559629207907477341973327162471330582932799519358538718357110052470659505841556698339735272962251537320174114627303064955659054546616695736935173636896607415685103194789641426789154055092163452767636014789557476550178987093464546757166004727853245749853013181648219989250644330424551492693482007143888874492275404633384669139756657915983671610404107909313874841336960431452323752465213549764518888108659164216434321370596599706812933861186045921420692198142754688938698330544604148238163762080469244936777417234128605905251719281744733782503192533558928")
		});
		
		exec.wholeClass(Test.class).forEach(
			(x,y) -> y.flags.forEach(f -> System.out.printf("[%s]: %s\n", x, f))
		);
	}
	
	// somewhere from stack overflow ^.^
	public static BigInteger floorOfNthRoot(BigInteger x, int n) {
	    int sign = x.signum();
	    if (n <= 0 || (sign < 0))
	        throw new IllegalArgumentException();
	    if (sign == 0)
	        return BigInteger.ZERO;
	    if (n == 1)
	        return x;
	    BigInteger a;
	    BigInteger bigN = BigInteger.valueOf(n);
	    BigInteger bigNMinusOne = BigInteger.valueOf(n - 1);
	    BigInteger b = BigInteger.ZERO.setBit(1 + x.bitLength() / n);
	    do {
	        a = b;
	        b = a.multiply(bigNMinusOne).add(x.divide(a.pow(n - 1))).divide(bigN);
	    } while (b.compareTo(a) == -1);
	    return a;
	}
	
	@Task(value="Brittish Broadcasting Company", flagPattern = "FLAG\\{..*\\}")
	public static void chineeseRemainderTheorem(@Name("Mod") BigInteger[] Mod, @Name("encrypted") BigInteger[] encrypted, @Name("e") BigInteger e, @Name("flags") PrintStream flags) {
		BigInteger N = BigInteger.ONE;
		for(BigInteger M : Mod) {
			N = N.multiply(M);
		}
		BigInteger[] Y = new BigInteger[Mod.length];
		for(int i = 0; i < Y.length; i++) {
			Y[i] = N.divide(Mod[i]);
		}
		BigInteger[] Z = new BigInteger[Mod.length];
		for(int i = 0; i < Z.length; i++) {
			Z[i] = Y[i].modInverse(Mod[i]);
		}
		BigInteger X = BigInteger.ZERO;
		for(int i = 0; i < Mod.length; i++) {
			X = X.add(encrypted[i].multiply(Y[i]).multiply(Z[i])).mod(N);
		}
		BigInteger result = floorOfNthRoot(X, e.intValue());
		flags.println(new String(result.toByteArray()));
	}
	
	@Task(value="Bruteforce Diffie Hellman", flagPattern = "FLAG\\{..*\\}")
	public static void bruteforceDH(@Name("g") BigInteger g, @Name("p") BigInteger p, @Name("B") BigInteger B, @Name("A") BigInteger A, @Name("encrypted") BigInteger encrypted, @Name("flags") PrintStream flags) {
		BigInteger counter = BigInteger.ONE;
		BigInteger guess = g;
		while(!guess.equals(B) && !Thread.interrupted()) {
			guess = guess.multiply(g).mod(p);
			counter = counter.add(BigInteger.ONE);
		}
		BigInteger key = A.modPow(counter, p);
		String decrypted = new String(Utils.XOR(key, encrypted));
		flags.print(decrypted);
	}
}
